{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMJffEWG3hwypWlFpjmHv/8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Djaiber/ModelosProgramacion2/blob/main/sudoku.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rh95dVFbUeGa",
        "outputId": "1dcd3292-28b6-4a2f-a410-7bd973e08d4d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Tablero de Sudoku inicial:\n",
            "\n",
            "5 3    |   7    |      \n",
            "6      | 1 9 5  |      \n",
            "  9 8  |        |   6  \n",
            "- - - - - - - - - - - -\n",
            "8      |   6    |     3\n",
            "4      | 8   3  |     1\n",
            "7      |   2    |     6\n",
            "- - - - - - - - - - - -\n",
            "  6    |        | 2 8  \n",
            "       | 4 1 9  |     5\n",
            "       |   8    |   7 9\n",
            "\n",
            "Tablero de Sudoku resuelto:\n",
            "\n",
            "5 3 4  | 6 7 8  | 9 1 2\n",
            "6 7 2  | 1 9 5  | 3 4 8\n",
            "1 9 8  | 3 4 2  | 5 6 7\n",
            "- - - - - - - - - - - -\n",
            "8 5 9  | 7 6 1  | 4 2 3\n",
            "4 2 6  | 8 5 3  | 7 9 1\n",
            "7 1 3  | 9 2 4  | 8 5 6\n",
            "- - - - - - - - - - - -\n",
            "9 6 1  | 5 3 7  | 2 8 4\n",
            "2 8 7  | 4 1 9  | 6 3 5\n",
            "3 4 5  | 2 8 6  | 1 7 9\n",
            "\n",
            "Tiempo de resolución: 0.06750059127807617 segundos\n"
          ]
        }
      ],
      "source": [
        "\"\"\" Sudoku \"\"\"\n",
        "\n",
        "import time\n",
        "\n",
        "# Función para imprimir el tablero de Sudoku\n",
        "def imprimir_tablero(tablero):\n",
        "    \"\"\"\n",
        "    Imprime el tablero de Sudoku en una forma legible, sin mostrar ceros.\n",
        "\n",
        "    Parámetros:\n",
        "    tablero (list): Una lista de listas que representa el tablero de Sudoku de 9x9.\n",
        "    \"\"\"\n",
        "    for fila in range(9):  # Itera sobre cada fila del tablero\n",
        "        if fila % 3 == 0 and fila != 0:  # Imprime una línea divisoria después de cada grupo de 3 filas\n",
        "            print(\"- - - - - - - - - - - -\")\n",
        "\n",
        "        for columna in range(9):  # Itera sobre cada columna en la fila actual\n",
        "            if columna % 3 == 0 and columna != 0:  # Imprime una barra divisoria después de cada grupo de 3 columnas\n",
        "                print(\" | \", end=\"\")\n",
        "\n",
        "            if columna == 8:  # Si es la última columna, maneja el formato de impresión\n",
        "                if tablero[fila][columna] == 0:\n",
        "                    print(\" \", end=\"\")  # Imprime un espacio en blanco para celdas vacías\n",
        "                else:\n",
        "                    print(tablero[fila][columna], end=\"\")\n",
        "            else:\n",
        "                if tablero[fila][columna] == 0:\n",
        "                    print(\"  \", end=\"\")  # Imprime un espacio en blanco para celdas vacías\n",
        "                else:\n",
        "                    print(f\"{tablero[fila][columna]} \", end=\"\")\n",
        "\n",
        "        print()  # Imprime una nueva línea al final de la fila\n",
        "\n",
        "# Función para verificar si un número es válido en una posición específica\n",
        "\n",
        "def es_valido(tablero, numero, posicion):\n",
        "    \"\"\"\n",
        "    Verifica si un número puede ser colocado en una posición específica del tablero.\n",
        "\n",
        "    Parámetros:\n",
        "    tablero (list): Una lista de listas que representa el tablero de Sudoku de 9x9.\n",
        "    numero (int): El número a colocar en el tablero (1-9).\n",
        "    posicion (tuple): Una tupla (fila, columna) que indica la posición en el tablero.\n",
        "\n",
        "    Retorna:\n",
        "    bool: True si el número puede ser colocado, False en caso contrario.\n",
        "    \"\"\"\n",
        "    fila, columna = posicion\n",
        "\n",
        "    # Verificar la fila\n",
        "    for i in range(9):\n",
        "        if tablero[fila][i] == numero and columna != i:\n",
        "            return False  # El número ya está en la fila\n",
        "\n",
        "    # Verificar la columna\n",
        "    for i in range(9):\n",
        "        if tablero[i][columna] == numero and fila != i:\n",
        "            return False  # El número ya está en la columna\n",
        "\n",
        "    # Verificar la subcuadrícula de 3x3\n",
        "    cuadrante_x = columna // 3\n",
        "    cuadrante_y = fila // 3\n",
        "\n",
        "    for i in range(cuadrante_y * 3, cuadrante_y * 3 + 3):\n",
        "        for j in range(cuadrante_x * 3, cuadrante_x * 3 + 3):\n",
        "            if tablero[i][j] == numero and (i, j) != posicion:\n",
        "                return False  # El número ya está en la subcuadrícula de 3x3\n",
        "\n",
        "    return True  # El número puede ser colocado en la posición\n",
        "\n",
        "# Función para encontrar un espacio vacío en el tablero\n",
        "def encontrar_vacio(tablero):\n",
        "    \"\"\"\n",
        "    Encuentra una posición vacía en el tablero (indicado por un 0).\n",
        "\n",
        "    Parámetros:\n",
        "    tablero (list): Una lista de listas que representa el tablero de Sudoku de 9x9.\n",
        "\n",
        "    Retorna:\n",
        "    tuple: Una tupla (fila, columna) de la posición vacía, o None si no hay espacios vacíos.\n",
        "    \"\"\"\n",
        "    for i in range(9):  # Itera sobre cada fila del tablero\n",
        "        for j in range(9):  # Itera sobre cada columna en la fila actual\n",
        "            if tablero[i][j] == 0:\n",
        "                return (i, j)  # Devuelve la posición del espacio vacío\n",
        "    return None  # No hay espacios vacíos\n",
        "\n",
        "# Función para resolver el tablero utilizando backtracking\n",
        "def resolver_tablero(tablero):\n",
        "    \"\"\"\n",
        "    Intenta resolver el tablero de Sudoku utilizando el algoritmo de backtracking.\n",
        "\n",
        "    Parámetros:\n",
        "    tablero (list): Una lista de listas que representa el tablero de Sudoku de 9x9.\n",
        "\n",
        "    Retorna:\n",
        "    bool: True si el tablero se resuelve completamente, False si no hay solución.\n",
        "    \"\"\"\n",
        "    vacio = encontrar_vacio(tablero)  # Encuentra una posición vacía en el tablero\n",
        "    if not vacio:\n",
        "        return True  # No hay espacios vacíos, el tablero está completo\n",
        "    else:\n",
        "        fila, columna = vacio  # Obtiene las coordenadas del espacio vacío\n",
        "\n",
        "    for numero in range(1, 10):  # Prueba números del 1 al 9\n",
        "        if es_valido(tablero, numero, (fila, columna)):  # Verifica si el número es válido en la posición\n",
        "            tablero[fila][columna] = numero  # Coloca el número en la posición\n",
        "\n",
        "            if resolver_tablero(tablero):  # Intenta resolver el tablero recursivamente\n",
        "                return True  # El tablero se resolvió correctamente\n",
        "\n",
        "            tablero[fila][columna] = 0  # Deshace la asignación si no se pudo resolver\n",
        "\n",
        "    return False  # No se pudo resolver el tablero\n",
        "\n",
        "# Función para generar un tablero de Sudoku fijo\n",
        "def generar_sudoku_fijo():\n",
        "    \"\"\"\n",
        "    Genera un tablero de Sudoku predefinido y fijo.\n",
        "\n",
        "    Retorna:\n",
        "    list: Una lista de listas que representa el tablero de Sudoku de 9x9.\n",
        "    \"\"\"\n",
        "    tablero = [\n",
        "        [5, 3, 0, 0, 7, 0, 0, 0, 0],\n",
        "        [6, 0, 0, 1, 9, 5, 0, 0, 0],\n",
        "        [0, 9, 8, 0, 0, 0, 0, 6, 0],\n",
        "        [8, 0, 0, 0, 6, 0, 0, 0, 3],\n",
        "        [4, 0, 0, 8, 0, 3, 0, 0, 1],\n",
        "        [7, 0, 0, 0, 2, 0, 0, 0, 6],\n",
        "        [0, 6, 0, 0, 0, 0, 2, 8, 0],\n",
        "        [0, 0, 0, 4, 1, 9, 0, 0, 5],\n",
        "        [0, 0, 0, 0, 8, 0, 0, 7, 9]\n",
        "    ]\n",
        "    return tablero\n",
        "\n",
        "# Función principal para jugar al Sudoku\n",
        "def jugar_sudoku():\n",
        "    \"\"\"\n",
        "    Ejecuta el juego de Sudoku. Genera un tablero fijo, lo imprime, y luego intenta resolverlo.\n",
        "    \"\"\"\n",
        "    tablero = generar_sudoku_fijo()  # Genera un tablero de Sudoku fijo\n",
        "    print(\"\\nTablero de Sudoku inicial:\\n\")\n",
        "    imprimir_tablero(tablero)  # Imprime el tablero inicial\n",
        "\n",
        "    start_time = time.time()  # Marca el inicio del tiempo\n",
        "\n",
        "    if resolver_tablero(tablero):  # Intenta resolver el tablero\n",
        "        end_time = time.time()  # Marca el fin del tiempo\n",
        "        print(\"\\nTablero de Sudoku resuelto:\\n\")\n",
        "        imprimir_tablero(tablero)  # Imprime el tablero resuelto\n",
        "        print(f\"\\nTiempo de resolución: {end_time - start_time} segundos\")  # Imprime el tiempo de resolución\n",
        "    else:\n",
        "        print(\"\\nNo se pudo resolver el Sudoku.\")  # Mensaje si no se puede resolver\n",
        "\n",
        "# Ejecutar el juego de Sudoku\n",
        "jugar_sudoku()\n"
      ]
    }
  ]
}